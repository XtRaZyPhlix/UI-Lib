local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Test",
    SubTitle = "by #####",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,  -- Enable blur effect (set to false to disable blur)
    Theme = "Dark",  -- Set the theme to "Dark" or any other available theme
    MinimizeKey = Enum.KeyCode.LeftControl  -- Keybind for minimizing
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "box" }),
    MobAreas = Window:AddTab({ Title = "Mob Areas", Icon = "person-standing" }),
    Pillar = Window:AddTab({ Title = "Elemental Pilars", Icon = "zap" }),
    Reach = Window:AddTab({ Title = "Reach", Icon = "swords" }),
    Gamepass = Window:AddTab({ Title = "Gamepass", Icon = "badge" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "hexagon" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

--Main Mob Selection ---------------------------------------------------------------

local mob = ""
local item = ""

do
    Tabs.Main:AddParagraph({
        Title = "Mob Selection",
        Content = "Type Mob Name"
    })

local MobName = Tabs.Main:AddInput("Mob Name", {
    Title = "Mob Name",
    Default = "",
    Placeholder = "Placeholder",
    Numeric = false,
    Finished = false,
    Callback = function(input)
        mob = input
    end
})

local ToggleMob = Tabs.Main:AddToggle("Toggle Mob", {Title = "Toggle Mob", Default = false })

ToggleMob:OnChanged(function(Loop)
local a = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
_G.on = Loop
while _G.on == true do 
    task.wait(.8)
    for _,v in pairs(game.Workspace.Enemies:GetChildren()) do
        if string.find(v.Name, mob) then
            v:FindFirstChild("HumanoidRootPart").Anchored = true
            v:FindFirstChild("HumanoidRootPart").CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame*CFrame.new(1,3,-5)
        end
    end
end
end)

--Mob Areas ---------------------------------------------------------------


end
--Addons ---------------------------------------------------------------

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
